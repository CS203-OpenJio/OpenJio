name: Backend CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: public.ecr.aws/d5r5w0o4/openjio-backend-v2 
  ECS_SERVICE: backendService
  ECS_CLUSTER: openjio
  CONTAINER_NAME: openjio-backend
  INTEGRATION_DATABASE: openjio1

permissions:
  contents: read
  id-token: write # Required for OIDC

jobs:
  testing:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Start MySQL instance
        env:
          INTEGRATION_ROOT_PASSWORD: ${{ secrets.INTEGRATION_ROOT_PASSWORD }}
          INTEGRATION_DATABASE: ${{ env.INTEGRATION_DATABASE }}
        run: |
          cd jio
          docker-compose -f docker-compose.yml up -d ${{ env.INTEGRATION_DATABASE }}
          # Wait for the database to be ready
          until docker-compose -f docker-compose.yml exec db mysqladmin ping -h "db" --silent; do
            echo 'Waiting for the database service...'
            sleep 1
          done
          echo 'Database service is up and running!'

      - name: Run integration and unit tests with MySQL instance
        run: |
          cd jio
          echo "Running integration and unit tests..."
          ./mvn clean install

      - name: Shutdown MySQL service
        if: always()
        run: |
          cd jio
          docker-compose -f docker-compose.yml down

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-and-push
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definitions/deployBackend-v2-revision22
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-and-push.outputs.image }}

      - name: Deploy to Amazon ECS
        run: |
          NEW_TASK_DEF_JSON=$(aws ecs register-task-definition --cli-input-json file://task-definitions/deployBackend-v2-revision22.json)
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF_JSON | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $NEW_TASK_DEF_ARN
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# This workflow creates the backend Docker image and push it to AWS ECR. It will then deploy a task definition
# to ECS to run the backend container. 

# name: Backend Deployment

# on:
#   push:
#     branches:
#       - pauseCICD

# env:
#   AWS_REGION: ap-southeast-1 
#   ECR_REPOSITORY: public.ecr.aws/d5r5w0o4/openjio-backend-v2
#   ECS_SERVICE: backendService # set this to your Amazon ECS service name
#   ECS_CLUSTER:
#     openjio # set this to your Amazon ECS cluster name
#     # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME:
#     openjio-backend # set this to the name of the container in the
#     # containerDefinitions section of your task definition

# permissions:
#   contents: read

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       # - name: Change directory to Backend 
#       #   run: cd jio

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           IMAGE_TAG: latest
#         run: |
#           cd jio
#           aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/d5r5w0o4
#           docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"
#           aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
