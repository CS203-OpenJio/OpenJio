name: Sonarqube Generator

on:
  push:
    branches:
      - main


jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
  
      - name: Build and scan
        # Wait for SonarQube to be ready before scanning
        # Set timeout to 5 minutes (300 seconds)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd jio
          echo "Waiting for SonarQube to start..."
          SECONDS=0
          TIMEOUT=300
          while ! curl --output /dev/null --silent --head --fail http://localhost:9000/api/system/health; do
              printf '.'
              sleep 5
              if [ $SECONDS -ge $TIMEOUT ]; then
                  echo "SonarQube failed to start within $TIMEOUT seconds."
                  docker logs sonarqube  # This will help debug why SonarQube didn't start
                  exit 1
              fi
          done
          echo "SonarQube is up and running!"
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=OpenJio -Dsonar.projectName='OpenJio'

