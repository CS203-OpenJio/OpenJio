# This workflow creates the frontend Docker image and push it to AWS ECR. It will then deploy a task definition
# to ECS to run the frontend container. 

name: Frontend Deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-1 
  ECR_REPOSITORY: public.ecr.aws/d5r5w0o4/openjio-frontend-v2 
  ECS_SERVICE: frontendService # set this to your Amazon ECS service name
  ECS_CLUSTER:
    openjio # set this to your Amazon ECS cluster name
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    openjio-frontend # set this to the name of the container in the
    # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build, tag, and push image to Amazon ECR and update task definition
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend
          aws ecr-public get-login-password --region us-east-1  | docker login --username AWS --password-stdin public.ecr.aws/d5r5w0o4
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          TASK_DEF_TEMPLATE='task-definition.json' 
          NEW_IMAGE="public.ecr.aws/d5r5w0o4/$ECR_REPOSITORY:$IMAGE_TAG" # Replace with your actual ECR URL
          sed -i "s|<IMAGE_NAME>|$NEW_IMAGE|g" $TASK_DEF_TEMPLATE
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://$TASK_DEF_TEMPLATE)
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEFINITION_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster my-cluster --service my-service --task-definition ${{ steps.task-def.outputs.taskdefinition }}
